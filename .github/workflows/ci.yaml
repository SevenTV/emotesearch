name: Emotesearch Lint, Build, Test, Deploy

on:
  push:
    branches:
      - master
      - dev
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - labeled
  workflow_dispatch:
    inputs:
      deploy:
        description: "Which environment to deploy to"
        required: true
        default: "none"
        type: choice
        options:
          - prod
          - test
          - none

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DEPLOY: ${{ (inputs.deploy != 'none' && inputs.deploy) || ((github.event_name == 'workflow_dispatch' && github.event.inputs.deploy == 'prod') || (github.event_name == 'push' && github.ref_type == 'branch' && github.ref_name == 'master') && 'prod') || ((github.event_name == 'workflow_dispatch' && github.event.inputs.deploy == 'test') || (github.event_name == 'push' && github.ref_type == 'branch' && github.ref_name == 'dev') || (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'staged')) && 'test') || 'none' }}

jobs:
  ci:
    name: Emotesearch Lint, Build, Test, Deploy
    runs-on: aws-runner
    env:
      GOLANGCI_LINT_CACHE: /home/runner/.cache/golangci-lint
    concurrency:
      group: ${{ github.workflow }}-ci-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Make build context
        if: env.DEPLOY != 'none'
        run: |
          docker context create builders

      - name: Setup buildx
        uses: docker/setup-buildx-action@v2
        if: env.DEPLOY != 'none'
        with:
          install: true
          endpoint: builders

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Build docker image
        uses: docker/build-push-action@v3
        if: env.DEPLOY != 'none'
        with:
          context: .
          file: docker/Dockerfile
          cache-from: |
            type=gha
          cache-to: |
            type=gha,mode=max
          tags: |
            ghcr.io/seventv/emotesearch:${{ env.DEPLOY }}-${{ github.sha }}
            ghcr.io/seventv/emotesearch:${{ env.DEPLOY }}-latest
          push: true

  validate:
    name: API Deploy Validation
    needs: ci
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout code
        id: ok
        if: env.DEPLOY != 'none'
        uses: actions/checkout@v3

      - name: "Setup Terraform"
        if: steps.ok.outcome == 'success'
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: "Terraform Init"
        if: steps.ok.outcome == 'success'
        id: init
        env:
          TF_WORKSPACE: ${{ env.DEPLOY }}
        run: terraform init
        continue-on-error: true

      - name: "Terraform Workspace"
        if: steps.ok.outcome == 'success'
        run: terraform workspace select -or-create=true ${{ env.DEPLOY }}

      - name: Terraform fmt
        if: steps.ok.outcome == 'success'
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Validate
        if: steps.ok.outcome == 'success'
        id: validate
        run: terraform validate -no-color

      - name: Terraform Variables
        if: steps.ok.outcome == 'success'
        run: |
          cat <<EOF > *.auto.tfvars
            image_url="ghcr.io/seventv/emotesearch:${{ env.DEPLOY }}-${{ github.sha }}"
            image_pull_policy="IfNotPresent"

          EOF

      - name: "Terraform Plan"
        if: steps.ok.outcome == 'success'
        id: plan
        run: terraform plan -no-color

      - uses: actions/github-script@v6
        if: steps.ok.outcome == 'success' && github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Actor: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: "Terraform Apply"
        if: steps.ok.outcome == 'success'
        id: apply
        run: terraform apply -no-color -auto-approve
        continue-on-error: true
